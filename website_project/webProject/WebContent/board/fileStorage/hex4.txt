#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/interrupt.h>
#include <asm/io.h>

#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/types.h>
#include <linux/ioport.h>


static void *mem_base;


static void *hex0_addr;
static void *hex1_addr;
static unsigned int data = -1;

static unsigned int mode = 0;
#define NOFILL 4        //bit 2
#define BLINK  8        //bit 3
unsigned int hex0, hex1;        //HEX LED output data
static int turnoff = 0;         //for blink mode

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Gihyun Kim");
MODULE_DESCRIPTION("Seven Segment LEDs");

#define base_lwFPGA     0xFF200000
#define len_lwFPGA      0x200000

#define addr_LED        0
#define addr_HEX0       0x20
#define addr_HEX1       0x30
#define addr_SW         0x40
#define addr_KEY        0x50

#define HEX_DEVMAJOR    240
#define HEX_DEVNAME     "hex"


int hex_conversion[16] = {
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
        0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71,
};

struct timer_list hex_timer;
void hex_timer_function(unsigned long ptr);
void init_add_timer(void)
{
        init_timer(&hex_timer);

        hex_timer.function = hex_timer_function;
        hex_timer.expires = jiffies + HZ;       //after 1  sec
        hex_timer.data = 0;

        add_timer(&hex_timer);
}

void remove_timer(void)
{
        del_timer(&hex_timer);
}

void hex_timer_function(unsigned long ptr)
{
        if(!(mode & BLINK)) return;
        turnoff = !turnoff;
        if(turnoff){
                iowrite32(0,hex0_addr);
                iowrite32(0,hex1_addr);
        }else{
                iowrite32(hex0, hex0_addr);
                iowrite32(hex1, hex1_addr);
        }
        init_add_timer();
}

static ssize_t hex_write (struct file *file, const char __user *buf, size_t coun
t, loff_t *f_pos){
        unsigned int hex_data = 0;
        unsigned int nofill = 0;

        copy_from_user(&hex_data, buf, count);
        hex_data = hex_data & 0xFFFFFF;         //24-bit mask
        data = hex_data;        //for read

        if( mode & NOFILL ) nofill = 1;

        hex1 = 0;       //LED OFF state
        hex0 = hex_conversion[hex_data & 0xF];

        do{

                hex_data >>=4;
                if(nofill && hex_data ==0) break;
                hex0 |= hex_conversion[hex_data & 0xf] << 8;

                hex_data >>=4;
                if(nofill && hex_data ==0) break;
                hex0 |= hex_conversion[hex_data & 0xf] << 16;


                hex_data >>=4;
                if(nofill && hex_data ==0) break;
                hex0 |= hex_conversion[hex_data & 0xf] << 24;

                hex_data >>=4;
                if(nofill && hex_data ==0) break;
                hex1 |= hex_conversion[hex_data & 0xf];

                hex_data >>=4;
                if(nofill && hex_data ==0) break;
                hex1 |= hex_conversion[hex_data & 0xf] << 8;
        }while(0);

        iowrite32(hex0, hex0_addr);
        iowrite32(hex1, hex1_addr);

        return 4;
}

static int hex_open(struct inode *minode, struct file *mfile)
{
        return 0;
}

static int hex_release(struct inode *minode, struct file *mfile)
{
        return 0;
}

static ssize_t hex_read (struct file *file, char __user *buf, size_t count, loff
_t *f_pos){
        put_user(data, (unsigned int *) buf);
        return 4;
}

static long hex_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
{
        unsigned int newcmd;

        newcmd = cmd;
        if ((mode & BLINK) && !(newcmd & BLINK))
                remove_timer();
        mode = newcmd;
        if(mode & BLINK){
                init_add_timer();
        }
        return 0;
}

static struct file_operations hex_fops = {
        .read = hex_read,
        .write = hex_write,
        .open = hex_open,
        .release = hex_release,
        .unlocked_ioctl = hex_ioctl,
};

static void __exit hex_exit(void){
        unregister_chrdev(HEX_DEVMAJOR, HEX_DEVNAME);
        printk(" %s unregistered.\n", HEX_DEVNAME);

        iowrite32(0, hex0_addr);        //turn off all HEX LEDs
        iowrite32(0, hex1_addr);

        iounmap(mem_base);
}


static int __init hex_init(void)
{
        int res;

        res = register_chrdev(HEX_DEVMAJOR, HEX_DEVNAME, &hex_fops);
        if(res < 0 ){
                printk(KERN_ERR " hex : failed to register device. \n");
                return res;
        }

        mem_base = ioremap_nocache(base_lwFPGA, len_lwFPGA);
        if(!mem_base){
                printk("Error mapping memory\n");
                release_mem_region(base_lwFPGA, len_lwFPGA);
                return -EBUSY;
        }
        printk("Device: %s MAJOR: %d\n", HEX_DEVNAME, HEX_DEVMAJOR);

        hex0_addr = mem_base + addr_HEX0;
        hex1_addr = mem_base + addr_HEX1;

        return 0;
}

module_init(hex_init);
module_exit(hex_exit);